/* fft.1D_BLUE.kern
 *
 * ARGS:
 *   X:(...,) Input/Output
 * 
 * Computes FFT(R) in place
 * 
 * @author: Cade Brown <cade@kscript.org>
 */


static int KERN_FUNC(NXK_NAME)(int nargs, nx_t* args, int rank, ks_size_t* shape, void* extra) {
    NXK_ARG_1D(0, X);
    struct extra_data* ed = extra;
    nxfft_plan p = ed->plan;
    ks_size_t N = p->shape[0];
    ks_size_t M = p->k1D_BLUE.M;

    assert(rank == 1);
    assert(N == shape[0]);

    NXK_TYPE* tmp = p->k1D_BLUE.tmp.data;
    NXK_TYPE* tmpA = &tmp[0];
    NXK_TYPE* tmpB = &tmp[M];
    NXK_TYPE t, u, v;
    NXK_TYPE* Ws = p->k1D_BLUE.Ws.data;
    assert(p->k1D_BLUE.Ws.dtype == X.dtype);

    ks_cint i, j, k;
    for (i = 0; i < M; ++i) {
        tmpA[i].re = tmpA[i].im = 0;
        tmpB[i].re = tmpB[i].im = 0;
    }

    /* Pre-process step */
    for (i = 0; i < N; ++i) {
        t = NXK_GET_1D(X, i);
        tmpA[i].re = t.re*Ws[i].re - t.im*Ws[i].im; 
        tmpA[i].im = t.re*Ws[i].im + t.im*Ws[i].re; 
    }
    tmpB[0] = Ws[0];
    for (i = 1; i < N; ++i) {
        t.re = Ws[i].re;
        t.im = -Ws[i].im;
        tmpB[i].re = tmpB[M - i].re = t.re;
        tmpB[i].im = tmpB[M - i].im = t.im;
    }

    /* Now, compute M-plans on temporary buffers */
    nx_t trA = nx_make(tmpA, NXK_DTYPE, 1, (ks_size_t[]){ M }, NULL);
    nx_t trB = nx_make(tmpB, NXK_DTYPE, 1, (ks_size_t[]){ M }, NULL);
    if (!nxfft_exec(trA, trA, 1, (int[]){ 0 }, p->k1D_BLUE.planM, false) || !nxfft_exec(trB, trB, 1, (int[]){ 0 }, p->k1D_BLUE.planM, false)) {
        return -1;
    }
    /* Pointwise multiply */
    for (i = 0; i < M; ++i) {
        t = tmpA[i];
        tmpA[i].re = t.re*tmpB[i].re - t.im*tmpB[i].im;
        tmpA[i].im = t.re*tmpB[i].im + t.im*tmpB[i].re;
    }
    if (!nxfft_exec(trA, trA, 1, (int[]){ 0 }, p->k1D_BLUE.planM, false)) {
        return -1;
    }
    if (p->is_inv) {
        NXK_ATTR(r) scl = NXK_FUNC(rv)(1.0) / (M * N);

        NXK_GET_1D(X, 0).re = scl * (tmpA[0].re*Ws[0].re - tmpA[0].im*Ws[0].im);
        NXK_GET_1D(X, 0).im = scl * (tmpA[0].re*Ws[0].im + tmpA[0].im*Ws[0].re);

        for (i = 1; i < N; ++i) {
            j = i - N + M;
            NXK_GET_1D(X, N - i).re = -scl * (tmpA[j].re*Ws[i].re - tmpA[j].im*Ws[i].im);
            NXK_GET_1D(X, N - i).im = -scl * (tmpA[j].re*Ws[i].im + tmpA[j].im*Ws[i].re);
        }
    } else {
        NXK_ATTR(r) scl = NXK_FUNC(rv)(1.0) / (M);

        NXK_GET_1D(X, 0).re = scl * (tmpA[0].re*Ws[0].re - tmpA[0].im*Ws[0].im);
        NXK_GET_1D(X, 0).im = scl * (tmpA[0].re*Ws[0].im + tmpA[0].im*Ws[0].re);

        for (i = 1; i < N; ++i) {
            j = M - i;
            NXK_GET_1D(X, N - i).re = scl * (tmpA[j].re*Ws[i].re - tmpA[j].im*Ws[i].im);
            NXK_GET_1D(X, N - i).im = scl * (tmpA[j].re*Ws[i].im + tmpA[j].im*Ws[i].re);
        }
    }
    return 0;
}