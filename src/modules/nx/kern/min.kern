/* min.kern
 *
 * ARGS:
 *   X:(...,) Input
 *   R:(...,) Output
 * 
 * Computes 'R = min(X)'
 * 
 * @author: Cade Brown <cade@kscript.org>
 */

static int KERN_FUNC(NXK_NAME)(int nargs, nx_t* args, int len, void* extra) {
    NXK_ARG_1D(0, X);
    NXK_ARG_1D(1, R);
    NXK_ARG_1D(2, Rinit);

    assert(Rinit.dtype == nxd_bl);
    
    ks_cint i;
    NXK_TYPE ar;
    /* Initialize 'ar' */
    if (!*(nx_bl*)pRinit) {
        *(nx_bl*)pRinit = true;
        /* From 'x' */
        NXK_TYPE x = NXK_GET_1D(X, 0);
        NXK_GET_1D(R, 0) = x;
#if NXK_C
        ar.re = x.re*x.re + x.im*x.im;
#else
        ar = x;
#endif
    } else {
        NXK_TYPE r = NXK_GET_1D(R, 0);
#if NXK_C
        ar.re = r.re*r.re + r.im*r.im;
#else
        ar = r;
#endif
    }
    for (i = 0; i < len; ++i) {
        NXK_TYPE x = NXK_GET_1D(X, i);
#if NXK_C
        NXK_TYPE ax;
        ax.re = x.re*x.re + x.im*x.im;
        if (ax.re < ar.re) {
            NXK_GET_1D(R, 0) = x;
            ar.re = ax.re;
        }
#else
        if (x < ar) {
            NXK_GET_1D(R, 0) = x;
            ar = x;
        }
#endif
    }

    return 0;
}

