/* factlu.kern
 *
 * ARGS:
 *   P:(..., 1, N) Output
 *   L:(..., N, N) Input/Output
 *   U:(..., N, N) Output
 * 
 * Computes 'R = X @ Y'
 * 
 * @author: Cade Brown <cade@kscript.org>
 */


/* Get 'P' vector */
#define P_(_i) (*(nx_idx*)(pP + sP * (_i)))

static int KERN_FUNC(NXK_NAME)(int nargs, nx_t* args, int rank, ks_size_t* shape, void* extra) {
    nx_t P  = args[0];
    assert(P.dtype == nxd_idx);
    ks_uint pP = (ks_uint)P.data;
    ks_cint sP = P.strides[P.rank - 1];
    NXK_ARG_2D(1, L);
    NXK_ARG_2D(2, U);

    /* Size of factorization */
    ks_size_t N = shape[0];


    ks_cint i, j, k;

    /* Default: identity permutation matrix */
    for (i = 0; i < N; ++i) {
        P_(i) = i;
    }

    /* Tolerance for degenerate matrices */
    NXK_TYPE tol = 0;

    for (j = 0; j < N; ++j) {
        /* Find largest argument on this column */
        ks_cint maxi = j;
        NXK_TYPE maxa = 0;
        for (i = j; i < N; ++i) {
            NXK_TYPE tm = NXK_GET_2D(L, P_(i), j);
            if (tm < 0) tm = -tm;
            if (tm > maxa) {
                maxa = tm;
                maxi = i;
            }
        }
        if (maxa < tol) {
            /* Degenerate matrix */
        }
        if (maxi != j) {
            /* Exchange rows in the P vector */
            ks_cint ti = P_(j);
            P_(j) = P_(maxi);
            P_(maxi) = ti;
        }
        ks_cint jj = P_(j);
        for (i = j + 1; i < N; ++i) {
            ks_cint ii = P_(i);
            NXK_GET_2D(L, ii, j) /= NXK_GET_2D(L, jj, j);
            for (k = j + 1; k < N; ++k) {
                NXK_GET_2D(L, ii, k) -= NXK_GET_2D(L, ii, j) * NXK_GET_2D(L, jj, k);
            }
        }
    }


    /* Now, undo permutation matrix by setting 'U = P**-1 @ L' */
    for (i = 0; i < N; ++i) {
        ks_cint ii = P_(i);
        for (j = 0; j < N; ++j) {
            NXK_GET_2D(U, i, j) = NXK_GET_2D(L, ii, j);
        }
    }

    /* Now, transfer lower diagonals back to 'L' */
    for (i = 0; i < N; ++i) {
        for (j = 0; j < i; ++j) {
            NXK_GET_2D(L, i, j) = NXK_GET_2D(U, i, j);
            NXK_GET_2D(U, i, j) = 0;
        }
        NXK_GET_2D(L, i, i) = 1;
        for (j = i + 1; j < N; ++j) {
            NXK_GET_2D(L, i, j) = 0;
        }
    }

    nx_idx* tmpP = ks_malloc(sizeof(*tmpP) * N);
    assert(tmpP != NULL);

    /* Now, invert the permutation matrix onehot encoding */
    for (i = 0; i < N; ++i) {
        tmpP[P_(i)] = i;
    }
    for (i = 0; i < N; ++i) {
        P_(i) = tmpP[i];
    }
    ks_free(tmpP);
    return 0;
}
