/* sort_quick.kern
 *
 * ARGS:
 *   X:(...,) Input/Output
 * 
 * Sorts 'X' in place, according to quick sort
 * 
 * @author: Cade Brown <cade@kscript.org>
 */



/* Internal sorting function */
static void NXK_PASTE(sort_quick_impl, NXK_NAME)(ks_uint pX, ks_ssize_t sX, int l, int r) {
    NXK_TYPE t;
    if (l >= r) {
        return;
    }
    /* Quicksort */

    /* Select a pivot */
    int p = l + (r - l) / 2;
    NXK_TYPE pv = NXK_GET_1D(X, p);

    int li = l, ri = r;
    while (li <= ri) {
        while (NXK_GET_1D(X, li) < pv) {
            li++;
        }
        while (NXK_GET_1D(X, ri) > pv) {
            ri--;
        }
        if (li <= ri) {
            /* Swap */
            t = NXK_GET_1D(X, li);
            NXK_GET_1D(X, li) = NXK_GET_1D(X, ri);
            NXK_GET_1D(X, ri) = t;

            li++;
            ri--;
        }
    }

    /* Recursively sort halves */
    NXK_PASTE(sort_quick_impl, NXK_NAME)(pX, sX, l, ri);
    NXK_PASTE(sort_quick_impl, NXK_NAME)(pX, sX, li, r);
}

static int KERN_FUNC(NXK_NAME)(int nargs, nx_t* args, int rank, ks_size_t* shape, void* extra) {
    assert(rank == 1);
    NXK_ARG_1D(0, X);

    NXK_PASTE(sort_quick_impl, NXK_NAME)(pX, sX, 0, shape[0] - 1);

    return 0;
}

