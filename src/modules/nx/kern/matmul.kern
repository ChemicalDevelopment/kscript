/* matmul.kern
 *
 * ARGS:
 *   X:(..., M, N) Input
 *   Y:(..., N, K) Input
 *   R:(..., M, K) Output
 * 
 * Computes 'R = X @ Y'
 * 
 * @author: Cade Brown <cade@kscript.org>
 */

static int KERN_FUNC(NXK_NAME)(int nargs, nx_t* args, int rank, ks_size_t* shape, void* extra) {
    struct extra_data* ed = extra;

    assert(rank == 2);
    assert(nargs == 3);
    nx_t X = args[0], Y = args[1], R = args[2];

    ks_uint 
        pX = (ks_uint)X.data,
        pY = (ks_uint)Y.data,
        pR = (ks_uint)R.data
    ;
    ks_ssize_t
        srX = ed->srX, scX = ed->scX,
        srY = ed->srY, scY = ed->scY,
        srR = ed->srR, scR = ed->scR
    ;

    int M = ed->M;
    int N = ed->N;
    int K = ed->K;

    /* TODO: Check for BLAS? Or inspect strides? */

    ks_cint i, j, k;
    for (i = 0; i < M; ++i) {
        for (j = 0; j < K; ++j) {
            NXK_TYPE dp;
#ifdef NXK_C
            dp.re = 0;
            dp.im = 0;
#else
            dp = 0;
#endif
            for (k = 0; k < N; ++k) {
                NXK_TYPE x = NXK_GET_2D(X, i, k);
                NXK_TYPE y = NXK_GET_2D(Y, k, j);
#ifdef NXK_C
                dp.re += x.re*y.re - x.im*y.im;
                dp.im += x.re*y.im + x.im*y.re;
#else
                dp += x * y;
#endif
            }

            NXK_GET_2D(R, i, j) = dp;
        }
    }

    return 0;
}

